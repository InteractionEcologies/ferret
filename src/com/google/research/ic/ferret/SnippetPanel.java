package com.google.research.ic.ferret;

import com.google.research.ic.ferret.data.Event;
import com.google.research.ic.ferret.data.Snippet;
import com.google.research.ic.ferret.test.Debug;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.Scrollable;

/**
 * TODO: Insert description here. (generated by marknewman)
 */
public class SnippetPanel extends JPanel {

  private Snippet snippet = null;
  private String displayMode = null;
  
  public static final String DISPLAY_MODE_EXAMPLE = "DisplayModeExample";
  public static final String DISPLAY_MODE_RESULT = "DisplayModeResult";
  
  private ScrollablePanel snippetContentPanel = null;
  
  public SnippetPanel(Snippet snippet) {
    this.snippet = snippet;

    // create the content panel to hold the events and arrows
    // a box layout should do the right thing
    snippetContentPanel = new ScrollablePanel();
    snippetContentPanel.setLayout(new BoxLayout(snippetContentPanel, BoxLayout.X_AXIS));
    snippetContentPanel.setBorder(BorderFactory.createEmptyBorder());
    snippetContentPanel.setBackground(Color.white);
    snippetContentPanel.setOpaque(true);

    boolean startEventFound = false;
    
    //TODO: trimming should happen at log parse time, not here.
    //Snippet trimmedSnippet = snippet.getTrimmedSnippet();
    
    ArrayList<Event> events = snippet.getEvents();
    for (Iterator<Event> iterator = events.iterator(); iterator.hasNext();) {
      Event genericEvent = iterator.next();
      if (!startEventFound) {
        if (genericEvent.isStartCandidate() && genericEvent.isImportant()) {
          startEventFound = true;        
          snippetContentPanel.add(new EventPanel(genericEvent));
        }
      } else if (genericEvent.isImportant()) {
        snippetContentPanel.add(new ArrowPanel()); // add timing information as well,later
        snippetContentPanel.add(new EventPanel(genericEvent));
      }
    }
    
    // now create a scroll pane to wrap the content
    JScrollPane scrollingSnippetPanel = new JScrollPane(snippetContentPanel);
    scrollingSnippetPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
    scrollingSnippetPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollingSnippetPanel.setBorder(BorderFactory.createEmptyBorder());
    scrollingSnippetPanel.getHorizontalScrollBar().setPreferredSize(new Dimension(0, 12));

    //scrollingSnippetPanel.setPreferredSize(new Dimension(850, 130));
    this.add(scrollingSnippetPanel);
    this.setBackground(Color.white);
    this.setOpaque(true);
    this.setBorder(BorderFactory.createEmptyBorder());
    //this.setPreferredSize(scrollingSnippetPanel.getPreferredSize());
  }
  
  /**
   * Add an event to the current snippet in the panel
   * Used in example mode
   * @param event
   */
  public void addEvent(Event event) {
    if (event.isImportant()) {
      if (snippet.getEvents().size() > 0) {
        snippetContentPanel.add(new ArrowPanel()); 
      }
      snippet.addEvent(event);
      snippetContentPanel.add(new EventPanel(event));
      snippetContentPanel.revalidate();
    }
    
  }
  
  public Snippet getSnippet() {
    return snippet;
  }
  
  private static final class ScrollablePanel extends JPanel implements Scrollable {

    /* (non-Javadoc)
     * @see javax.swing.Scrollable#getPreferredScrollableViewportSize()
     */
    @Override
    public Dimension getPreferredScrollableViewportSize() {
      return new Dimension(850, 100);
    }

    /* (non-Javadoc)
     * @see javax.swing.Scrollable#getScrollableUnitIncrement(java.awt.Rectangle, int, int)
     */
    @Override
    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
      // TODO(marknewman): Auto-generated method stub
      return 0;
    }

    /* (non-Javadoc)
     * @see javax.swing.Scrollable#getScrollableBlockIncrement(java.awt.Rectangle, int, int)
     */
    @Override
    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
      // TODO(marknewman): Auto-generated method stub
      return 0;
    }

    /* (non-Javadoc)
     * @see javax.swing.Scrollable#getScrollableTracksViewportWidth()
     */
    @Override
    public boolean getScrollableTracksViewportWidth() {
      // TODO(marknewman): Auto-generated method stub
      return false;
    }

    /* (non-Javadoc)
     * @see javax.swing.Scrollable#getScrollableTracksViewportHeight()
     */
    @Override
    public boolean getScrollableTracksViewportHeight() {
      // TODO(marknewman): Auto-generated method stub
      return false;
    }
    
  }
  
}
