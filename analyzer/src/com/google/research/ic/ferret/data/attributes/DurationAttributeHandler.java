/*******************************************************************************
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.google.research.ic.ferret.data.attributes;

import com.google.research.ic.ferret.data.ResultSet;
import com.google.research.ic.ferret.data.Snippet;
import com.google.research.ic.ferret.data.SubSequence;
import com.google.research.ic.ferret.test.Debug;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

/**
 * TODO: Insert description here. (generated by marknewman)
 */
public class DurationAttributeHandler implements AttributeHandler {
  public static final String KEY = "duration";
  public static final String DISPLAY_NAME = "Duration";
  public static final int DEFAULT_NUM_BINS = 4;

  private int numBins = DEFAULT_NUM_BINS;
  
  public int getNumBins() {
    return numBins;
  }

  public void setNumBins(int numBins) {
    this.numBins = numBins;
  }

  @Override
  public void updateAttribute(Snippet s) {
    long dur = 0;
    if (s != null && s.getEvents().size() > 2) {
      long startTime = s.getEvents().get(0).getTimeStamp();
      long endTime = s.getEvents().get(s.getEvents().size() - 1).getTimeStamp();
  
      Calendar startCal = Calendar.getInstance();
      Calendar endCal = Calendar.getInstance(); 
      startCal.setTimeInMillis(startTime);
      endCal.setTimeInMillis(endTime);
  
      dur = endTime - startTime;
    }
    s.setAttribute(new DateTimeAttribute(KEY, new Date(dur))); // in milliseconds
  }
  
  @Override
  public String getKeyDisplayString(Attribute attribute) {
    return DISPLAY_NAME;
  }

  @Override
  public String getValueDisplayString(Attribute attribute) {
    return attribute.getValue().toString();
  }
  
  @Override
  public String getKey() {
    return KEY;
  }
  
  @Override
  public List<Bin> computeSummary(ResultSet rs) {
    List<Bin> binList = new ArrayList<Bin>();
    List<SubSequence> subSequences = rs.getResults();
    
    Date[] durations = new Date[subSequences.size()];
    
    int i = 0;
    for (SubSequence s : subSequences) {
      Attribute attr =  s.getSubSnippet().getAttribute(KEY);
      if (attr != null) {
        durations[i++] = (Date) s.getSubSnippet().getAttribute(KEY).getValue();
      }
    }
    
    Arrays.sort(durations); 
    
    if (durations.length > 0) {
      Date min = durations[0];
      Date max = new Date(durations[durations.length - 1].getTime() + 1); // add a ms
      long range = max.getTime() - min.getTime();
      
      //make some bins
      Date[] binDividers = new Date[numBins + 1];
      binDividers[0] = min;
      binDividers[binDividers.length - 1] = max;
      for (int j = 1; j < binDividers.length - 1; j++) {
        long divider = min.getTime() + j * range / numBins;
        binDividers[j] = new Date(divider);
      }
      
      int[] binCounters = new int[numBins];
      Arrays.fill(binCounters, 0);
      for (Date d : durations) {
        for (int k = 0; k < binDividers.length; k++) {
          if (d.after(binDividers[k]) && d.before(binDividers[k+1])) {
            binCounters[k]++;
          }
        }
      }
  
      for (int m = 0; m < numBins; m++) {
  
        SimpleDateFormat format = new SimpleDateFormat("H:mm:ss");
        format.setTimeZone(TimeZone.getTimeZone("UTC"));
        StringBuilder sb = new StringBuilder();
              
        sb.append(format.format(binDividers[m]));
        sb.append("-");
        sb.append(format.format(binDividers[m+1]));
              
        binList.add(new Bin(sb.toString(), binDividers[m].getTime(), binDividers[m+1].getTime(), 
            DateTimeAttribute.TYPE, binCounters[m]));
      }
    }
    return binList;
  }

}
