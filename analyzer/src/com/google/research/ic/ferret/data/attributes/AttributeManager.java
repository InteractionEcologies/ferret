/*******************************************************************************
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.google.research.ic.ferret.data.attributes;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.research.ic.ferret.data.ResultSet;
import com.google.research.ic.ferret.data.Snippet;
import com.google.research.ic.ferret.test.Debug;

/**
 * TODO: Insert description here. (generated by marknewman)
 */
public class AttributeManager {
  
  private static AttributeManager theManager = null;

  private Map<String, AttributeHandler> handlers = new HashMap<String, AttributeHandler>();
  
  private AttributeManager() {}

  public static AttributeManager getManager() {
    if (theManager == null) {
      theManager = new AttributeManager();
    }
    return theManager;
  }
  
  public void updateAttributes(Snippet snippet) {
    for (AttributeHandler h : handlers.values()) {
      h.updateAttribute(snippet);
    }
  }
  
  public void addHandler(AttributeHandler handler) {
    synchronized (handlers) {
      handlers.put(handler.getKey(), handler);
    }
  }

  public void removeHandler(AttributeHandler handler) {
    synchronized (handlers) {
      handlers.remove(handler);
    }
  }

  public void clearHandlers() {
    synchronized (handlers) {
      handlers.clear();
    }
  }

  public String getKeyDisplayString(Attribute attr) {
    return handlers.get(attr.getKey()).getKeyDisplayString(attr);
  }

  public String getValueDisplayString(Attribute attr) {
    return handlers.get(attr.getKey()).getValueDisplayString(attr);
  }

  public Set<String> getAllAttributeKeys() {
    return handlers.keySet();
  }

  /**
   * @param resultSet
   * @return a map that maps attribute keys to a list of summary bins
   */
  public Map<String, List<Bin>> computeSummaries(ResultSet resultSet) {

    Map<String, List<Bin>> binMap = new HashMap<String, List<Bin>>();
    for (AttributeHandler h : handlers.values()) {
      Debug.log("Dealing with handler: " + h);
      List<Bin> bins = h.computeSummary(resultSet);
      binMap.put(h.getKey(), bins);
    }
    
    return binMap;
  }
  
}
