/*******************************************************************************
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.google.research.ic.ferret.data;

import com.google.research.ic.ferret.Config;
import com.google.research.ic.ferret.data.attributes.Attribute;
import com.google.research.ic.ferret.data.attributes.AttributeManager;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * An ordered sequence of Events representing a segment of
 * a user's interaction (generated by marknewman)
 */
 public class Snippet {
     
  protected String userId = null;
  protected String deviceId = null;
  protected long latestTime = -1;
  protected Event startEvent = null;
  protected Event stopEvent = null;
  protected String sourceFilename = null;
  
  protected ArrayList<Event> events = new ArrayList<Event>();
  protected HashMap<String, Attribute> attributes = new HashMap<String, Attribute>();
  
  protected Map<Integer, Map<String, List<Integer>>> nGramTables = 
      new HashMap<Integer, Map<String, List<Integer>>>();
  
  private transient List<SubSequence> subsequences;
  
  public Snippet() {
    initAttributes();
  }
  
  public Snippet(Event firstEvent) {
    this();
    this.userId = firstEvent.getUserId();
    this.deviceId = firstEvent.getDeviceId();
    addEvent(firstEvent);
  }

  /** 
   * subclasses can override to deal with custom attributes
   * but they should call super.initAttributes()
   */
  private void initAttributes() {

  }

  public ArrayList<Event> getEvents () {
    synchronized (events) {
      return events;      
    }
  }
  
  public void addEvent(Event event) {
    if (event == null) {
      return;
    }
    if (this.userId == null) {
      this.userId = event.userId;
    }
    if (this.deviceId == null) {
      this.deviceId = event.deviceId;
    }
//    if ((this.userId != null && !this.userId.equals(event.userId)) ||
//        (this.deviceId != null && !this.deviceId.equals(event.deviceId))) {
//      throw new IllegalArgumentException("Can't add " + event + 
//          " to snippet of size " + this.getEvents().size() + 
//          " because snippet.userId = " + userId +
//          " and event.userId = " + event.userId +
//          " and snippet.deviceId = " + this.deviceId +
//          " and event.deviceId = " + event.deviceId);
//    }
    synchronized(events) {
      events.add(event);
    }
    if (Config.debug) {
//      if (event.getTimeStamp() > latestTime) {
//        latestTime = event.getTimeStamp();
//        Debug.log("Latest time is now " + latestTime);
//        Calendar c = Calendar.getInstance();
//        Date d = new Date(latestTime * 1000);
//        Debug.log("As a date, that is " + d);
//        long now = System.currentTimeMillis();
//        Debug.log("Now it is " + now + ", which is " + new Date(now));
//      }
    }
    updateAttributes();
  }

  /**
   * @return the userId
   */
  public String getUserId() {
    return userId;
  }

  /**
   * @return the deviceId
   */
  public String getDeviceId() {
    return deviceId;
  }
  
  public long getLatestTime() {
    return latestTime;
  }
  
  public void setIndexedSequences(List<SubSequence> subsequences) {
    this.subsequences = subsequences;
  }

  public List<SubSequence> getIndexedSubsequences() {
    return subsequences;
  }
  
  public long getDurationInMillis () {
    long startTime = events.get(0).getTimeStamp();
    long endTime = events.get(events.size() - 1).getTimeStamp();
    return endTime - startTime;
  }
  
  public Calendar getStartDate() {
    long startTime = events.get(0).getTimeStamp();
    Calendar c = Calendar.getInstance();
    if (startTime < Math.pow(10,9)) { // accessibility logs report time in seconds
      startTime *= 1000;
    }
    c.setTimeInMillis(startTime);
    return c;
  }
  
  public Calendar getEndDate() {
    long endTime = events.get(events.size() - 1).getTimeStamp();
    Calendar c = Calendar.getInstance();
    if (endTime < Math.pow(10,9)) { // accessibility logs report time in seconds
      endTime *= 1000;
    }
    c.setTimeInMillis(endTime);
    return c;    
  }
  
  public String getUserName() {
    return UserMap.getUserMap().getUserName(userId);
  }
  
  public void updateAttributes() {
    AttributeManager.getManager().updateAttributes(this);
  }
  
  public Attribute getAttribute(String key) {
    Attribute attr = attributes.get(key);
    return attr;
  }
  
  public List<Attribute> getAttributes() {
    return new ArrayList<Attribute>(attributes.values());
  }

  public void setAttribute(Attribute a) {
    attributes.put(a.getKey(), a);
  }

  public void addNGram(int nGramLength, String nGramId, int location) {
    Map<String, List<Integer>> nGramMap = nGramTables.get(Integer.valueOf(nGramLength));
    if (nGramMap == null) {
      nGramMap = new HashMap<String, List<Integer>>();
      nGramTables.put(Integer.valueOf(nGramLength), nGramMap);
    }
    
    List<Integer> locations = nGramMap.get(nGramId);
    if (locations == null) {
      locations = new ArrayList<Integer>();
      nGramMap.put(nGramId, locations);
    }
    
    locations.add(Integer.valueOf(location));
  }
  
  public Map<String, List<Integer>> getNGramTable(int nGramLength) {
    return nGramTables.get(Integer.valueOf(nGramLength));
  }
  
  public int size() {
    return getEvents().size();
  }
  
  public String getSourceFilename() {
    return sourceFilename;
  }
  
  public void setSourceFilename(String name) {
    sourceFilename = name;
  }
  
  public String toString() {
    return "Snippet from file " + getSourceFilename() + ", user=" + getUserName() + ", size=" + size();
  }
  
  public String getId() {
    long ts = -1;
    if (events.size() > 0) {
      ts = events.get(0).getTimeStamp();
    }
    return userId + "$" + ts + "$" + sourceFilename;
    
  }
}

